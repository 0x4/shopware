<?xml version="1.0"?>
<!--
    Shopware deploy script written by Shopware AG

    Simple phing script that does the following tasks:
    - removes files and directories from previous runs
    - svn exports current trunk to deploy directory
    - appends sql deltas to install and update scripts
    - moves sql deltas to archive
    - deletes all the files defined in filset "filestodelete"
    - creates files and folders not present in svn
    - compresses the content to build.zip and build.tar.gz

    - test-release
        creates an testrelease from trunk state
    - prepare release
        prepares for an release sets
        checks out current trunk
        merges and moves deltas
        creates svn tag
    - release
        creates releasepackge from given tag
    - create-update
        creates an updatepackage from trunk state

    Use (defaults to test-release):
    phing -f build.deploy.xml

    Releasecommands:
    phing -f build.deploy.xml prepare-release
    phing -f build.deploy.xml svncreatetag
    phing -f build.deploy.xml release

    Testrelease:
    phing -f build.deploy.xml test-release

    Test Update:
    phing -f build.deploy.xml create-test-update

    Update:
    phing -f build.deploy.xml create-update

    Requires:
    pear install phing/phing
    pear install VersionControl_SVN-alpha

    - Upload *.tar.gz to /tmp at files.shopware.de
    - mkdir www.files.shopware.de/update_4.0.4
    - tar -zxvf install_4.0.4.tar.gz -C  www.files.shopware.de/update_4.0.4

    Todo:
    - Rename commands
    - Tidy up
    - Automate upload / exctraction on server
 -->
<project name="Shopware deploy" default="test-release">
    <taskdef name="svnexportdiff"    classname="phing.tasks.swag.SvnExportDiffTask" />
    <taskdef name="appendsqldeltas"  classname="phing.tasks.swag.AppendSqlDeltasTask" />

    <property file="${project.basedir}/release.properties"/>

    <property name="exportdir"      value="${project.basedir}/deploy" />
    <property name="updatedir"      value="${project.basedir}/deploy" />

    <!-- Properties are set in env target -->
    <property name="packageprefix"   value="" />
    <property name="svn.export.path" value="" />
    <property name="projectdir"      value="" />

    <fileset id="filestodelete-update" dir="${exportdir}">
        <include name="**/.gitkeep"/>
        <include name="_build/" />
        <include name="_tools/" />
        <include name="_doc/" />
        <include name="_jmeter/" />
        <include name="_sql/" />
        <include name="_tests/" />
        <include name="update/" />
        <include name="install/" />
        <include name="cache/" />
        <include name="check/" />
        <include name="snippets/backend/plugins/" />
        <include name="extjs-page-analyzer/" />
        <include name="check_files.php" />
        <include name="config_staging.php" />
        <include name="config.php.dist" />
        <include name="README.md" />
        <include name=".htaccess" />
        <include name="engine/Shopware/Plugins/Commercial/" />
    </fileset>

    <fileset id="filestodelete-install" dir="${exportdir}">
        <include name="_build/" />
        <include name="_tools/" />
        <include name="_doc/" />
        <include name="_jmeter/" />
        <include name="_sql/" />
        <include name="_tests/" />
        <include name="update/" />
        <include name="check/" />
        <include name="snippets/backend/plugins/" />
        <include name="extjs-page-analyzer/" />
        <include name="check_files.php" />
        <include name="config_staging.php" />

        <include name="engine/Shopware/Plugins/Commercial/**" />
        <exclude name="engine/Shopware/Plugins/Commercial/Backend" />
        <exclude name="engine/Shopware/Plugins/Commercial/Frontend" />
        <exclude name="engine/Shopware/Plugins/Commercial/Core" />
    </fileset>

    <fileset id="sqldeltas" dir="${projectdir}/_sql/deltas">
        <include name="*.sql" />
    </fileset>

    <target name="prepare-release">
        <phingcall target="do-prepare-release">
            <property name="projectdir" value="${updatedir}" />
            <property name="svn.export.path" value="${svn.repo.tags}${svn.newtag}" />
            <property name="packageprefix"  value="install" />
        </phingcall>
    </target>

    <target name="release">
        <phingcall target="do-release">
            <property name="projectdir" value="${updatedir}" />
            <property name="svn.export.path" value="${svn.repo.tags}${svn.newtag}" />
            <property name="packageprefix"  value="install" />
        </phingcall>
    </target>

    <target name="test-release">
        <phingcall target="do-test-release">
            <property name="projectdir" value="${exportdir}" />
            <property name="svn.export.path" value="${svn.repo.trunk}" />
            <property name="packageprefix"  value="install" />
        </phingcall>
    </target>

    <target name="create-update">
        <phingcall target="do-create-update">
            <property name="projectdir" value="${updatedir}" />
            <property name="packageprefix"  value="update" />
        </phingcall>
    </target>

    <target name="create-test-update">
        <phingcall target="do-create-test-update">
            <property name="projectdir" value="${updatedir}" />
            <property name="packageprefix"  value="update" />
        </phingcall>
    </target>

    <target name="do-prepare-release" depends="cleanup, svncheckout, mergesqldeltas, svncommit" />
    <target name="do-release" depends="cleanup, svnexport, cleanupexport, preparefiles, dist-zip, dist-targz" />
    <target name="do-create-update" depends="cleanup, export-changed-files-from-tag, prepare-update-files, dist-zip, dist-targz" />

    <target name="do-test-release" depends="cleanup, svnexport, mergesqldeltas, cleanupexport, preparefiles, dist-zip" />
    <target name="do-create-test-update" depends="cleanup, export-changed-files, mergesqldeltas, prepare-update-files, dist-zip" />

    <target name="svncheckout" depends="svncredentials">
        <svncheckout
                username="${svn.username}"
                password="${svn.password}"
                repositoryurl="${svn.repo.trunk}"
                todir="${updatedir}/"
                />
    </target>

    <target name="svncreatetag" depends="svncredentials">
        <svncopy
                username="${svn.username}"
                password="${svn.password}"
                nocache             = "true"
                repositoryurl       = "${svn.repo.trunk}"
                todir               = "${svn.repo.tags}${svn.newtag}"
                message             = "Tag version ${svn.newtag}"
                />

        <echo message="New tag ${svn.newtag} created" />
    </target>

    <target name="svncommit" depends="svncredentials">
        <input propertyName="confirmCommit" validArgs="yes,no" defaultValue="yes">
            Commit to SVN with message: 'Prepare ${svn.newtag} release'?
            Take your time to review the changes that are going to be commited.
        </input>
        <if>
            <equals arg1="${confirmCommit}" arg2="yes" />
            <then>
                <svncommit
                        username="${svn.username}"
                        password="${svn.password}"
                        nocache="true"
                        workingcopy="${updatedir}/"
                        recursive="true"
                        message="Prepare ${svn.newtag} release" />
            </then>
            <else>
                <echo message="Commit aborted" />
            </else>
        </if>
    </target>

    <target name="export-changed-files-from-tag" depends="svncredentials">
        <delete dir="${updatedir}"/>
        <mkdir dir="${updatedir}" mode="775" />

        <svnexportdiff
                username="${svn.username}"
                password="${svn.password}"
                revision="${svn.baserevision}"
                repositoryurl="${svn.repo.tags}${svn.newtag}"
                todir="${updatedir}/"
                />
    </target>

    <target name="export-changed-files" depends="svncredentials">
        <delete dir="${updatedir}"/>
        <mkdir dir="${updatedir}" mode="775" />

        <svnexportdiff
                username="${svn.username}"
                password="${svn.password}"
                revision="${svn.baserevision}"
                repositoryurl="${svn.repo.trunk}"
                todir="${updatedir}/"
                />

        <delete dir="${updatedir}/_sql"/>

        <svnexport
                username="${svn.username}"
                password="${svn.password}"
                nocache="true"
                repositoryurl="${svn.repo.trunk}/_sql"
                todir="${updatedir}/_sql" />
    </target>

    <target name="prepare-update-files">
        <move file="${updatedir}/_sql/update.sql" tofile="${updatedir}/update.sql" />
        <delete dir="${updatedir}/_sql"/>

        <delete includeemptydirs="true">
            <fileset refid="filestodelete-update" />
        </delete>
    </target>

    <target name="stagefiles">
        <exec command="svn add _sql/install/${svn.newtag}.sql" dir="${updatedir}" />
        <exec command="svn add _sql/demo/${svn.newtag}.sql" dir="${updatedir}" />
        <exec command="svn add _sql/archive/${svn.newtag}" dir="${updatedir}" logoutput="true" />
        <exec command="svn delete _sql/deltas/*.sql" dir="${updatedir}" />
    </target>

    <target name="mergesqldeltas">
        <echo msg="Copy ${projectdir}/_sql/install/${svn.lasttag}.sql to ${projectdir}/_sql/install/${svn.newtag}.sql"/>
        <copy file="${projectdir}/_sql/install/${svn.lasttag}.sql" tofile="${projectdir}/_sql/install/${svn.newtag}.sql" overwrite="true"/>
        <echo msg="Append deltas to ${projectdir}/_sql/install/${svn.newtag}.sql"/>
        <appendsqldeltas
                dir="${projectdir}/_sql/deltas"
                outputFile="${projectdir}/_sql/install/${svn.newtag}.sql" />


        <echo msg="Copy ${projectdir}/_sql/demo/${svn.lasttag}.sql to ${projectdir}/_sql/demo/${svn.newtag}.sql"/>
        <copy file="${projectdir}/_sql/demo/${svn.lasttag}.sql" tofile="${projectdir}/_sql/demo/${svn.newtag}.sql" overwrite="true"/>
        <echo msg="Append deltas to ${projectdir}/_sql/demo/${svn.newtag}.sql"/>
        <appendsqldeltas
                dir="${projectdir}/_sql/deltas"
                outputFile="${projectdir}/_sql/demo/${svn.newtag}.sql" />


        <echo msg="Append deltas to ${projectdir}/_sql/update.sql"/>
        <appendsqldeltas
                dir="${projectdir}/_sql/deltas"
                outputFile="${projectdir}/_sql/update.sql" />

        <if>
            <available file='${projectdir}/install/assets/sql/sw4_clean.sql' type='file' />
            <then>
                <echo msg="Append deltas to ${projectdir}/install/assets/sql/sw4_clean.sql"/>
                <appendsqldeltas
                        dir="${projectdir}/_sql/deltas"
                        outputFile="${projectdir}/install/assets/sql/sw4_clean.sql" />
            </then>
        </if>

        <echo msg="Archive deltas"/>
        <mkdir dir="${projectdir}/_sql/archive/${svn.newtag}" mode="775" />
        <copy todir="${projectdir}/_sql/archive/${svn.newtag}" >
            <fileset refid="sqldeltas" />
        </copy>
        <delete includeemptydirs="true">
            <fileset refid="sqldeltas" />
        </delete>
    </target>

    <target name="cleanup">
        <delete dir="${exportdir}"/>
        <delete file="./build.tar.gz"/>
        <delete file="./build.zip"/>
    </target>

    <target name="svncredentials">
        <if>
            <not>
                <isset property="svn.username" />
            </not>
            <then>
                <input propertyName="svn.username">Enter svn username:</input>
            </then>
        </if>

        <if>
            <not>
                <isset property="svn.password" />
            </not>
            <then>
                <input propertyName="svn.password">Enter svn password:</input>
            </then>
        </if>
    </target>

    <target name="svnexport" depends="svncredentials">
        <echo message="Export ${svn.export.path} to ${exportdir}" />
        <property name="" value="${svn.repo.trunk}" />

        <svnexport
                username="${svn.username}"
                password="${svn.password}"
                nocache="true"
                repositoryurl="${svn.export.path}"
                todir="${exportdir}" />
    </target>

    <target name="cleanupexport">
        <delete includeemptydirs="true">
            <fileset refid="filestodelete-install" />
        </delete>
    </target>

    <target name="preparefiles">
        <move file="${exportdir}/config.php.dist" tofile="${exportdir}/config.php" />
        <chmod file="${exportdir}/config.php" mode="0775" />
    </target>

    <target name="timestamp">
        <tstamp>
            <format property="releasedate" pattern="%Y%m%d" />
        </tstamp>
    </target>

    <target name="dist-zip" depends="timestamp">
        <echo msg="Creating zip archive..." />
        <zip destfile="./${packageprefix}_${svn.newtag}_${releasedate}.zip">
            <fileset dir="${exportdir}">
                <include name="**/**" />
            </fileset>
        </zip>
        <echo msg="Files copied and compressed in build directory OK!" />
    </target>

    <target name="dist-targz" depends="timestamp">
        <echo msg="Creating tar.gz archive..." />
        <tar destfile="./${packageprefix}_${svn.newtag}_${releasedate}.tar.gz" compression="gzip">
            <fileset dir="${exportdir}">
                <include name="**/**" />
            </fileset>
        </tar>
        <echo msg="Files copied and compressed in build directory OK!" />
    </target>
</project>
